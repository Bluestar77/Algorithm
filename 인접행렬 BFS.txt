#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#pragma warning(disable:4996)

#define N 100

typedef struct Graph {
	int** matrix;
	int num;
	int* isVisit;
}Graph;


void init(Graph* g)
{
	for (int i = 0; i < g->num; i++) {
		for (int j = 0; j < g->num; j++) {
			g->matrix[i][j] = 0;
		}
		g->isVisit[i] = 0;
	}
}

void print(Graph* g)
{
	for (int i = 0; i < g->num; i++) {
		printf("%d row : ", i + 1);
		for (int j = 0; j < g->num; j++) {
			printf(" %d", g->matrix[i][j]);
		}
		printf("\n");
	}
}

void insertEdge(Graph* g, int v1, int v2)
{
	if (v1 > g->num || v2 > g->num || v1 <= 0 || v2 <= 0) {
		return;
	}
	g->matrix[v1 - 1][v2 - 1] = 1;
	g->matrix[v2 - 1][v1 - 1] = 1;
}

typedef struct {
	int front, rear;
	int* queue[N];
}Queue;

void initQueue(Queue* Q)
{
	Q->front = 0;
	Q->rear = 0;
}

int isQueueEmpty(Queue* Q)
{
	return Q->rear == Q->front;
}

void enqueue(Queue* Q, int n)
{
	Q->rear = (Q->rear + 1) % N;
	Q->queue[Q->rear] = n;
}

int dequeue(Queue* Q)
{
	Q->front = (Q->front + 1) % N;
	return Q->queue[Q->front];
}

void BFS(Graph* G, int n)
{
	Queue Q;
	initQueue(&Q);
	int t;

	enqueue(&Q, n);
	printf("%d\n", n);
	G->isVisit[n - 1] = 1;

	while (!isQueueEmpty(&Q))
	{
	
		t = dequeue(&Q);

		for (int i = 0; i < G->num; i++) {
			if (G->matrix[t - 1][i] != 0 && G->isVisit[i] != 1)
			{
				printf("%d\n", i + 1);
				enqueue(&Q, i + 1);					
				G->matrix[t - 1][i] = 0;
				G->matrix[i][t - 1] = 0;
				G->isVisit[i] = 1;
			}
		}
	}
}

int main(void)
{
	Graph G;
	int i;
	int n, m, s;

	scanf("%d %d %d", &n, &m, &s);


	G.matrix = (int**)malloc(sizeof(int*) * n);
	G.isVisit = (int*)malloc(sizeof(int) * n);
	for (i = 0; i < n; i++) {
		G.matrix[i] = (int*)malloc(sizeof(int) * n);
	}
	G.num = n;

	init(&G);

	int a, b;
	for (int i = 0; i < m; i++) {
		scanf("%d %d", &a, &b);
		insertEdge(&G, a, b);
	}
	//print(&G);
	BFS(&G, s);

}
